# 2FA Project Environment Configuration
# Save this file as ".env.local" in the 2fa-project directory (same level as package.json)

# MongoDB connection string
# Format: mongodb+srv://<username>:<password>@<cluster>.mongodb.net/<database>
# Create a free MongoDB Atlas account at https://www.mongodb.com/cloud/atlas/register
MONGODB_URI=

# Session encryption password - Must be at least 32 characters
# Generate a secure random string: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
SESSION_PASSWORD=

# URL for your application - for local development, use:
NEXT_PUBLIC_APP_URL=http://localhost:3000

# Gmail account for sending verification emails
# Use your full Gmail address
EMAIL_USER=

# Gmail app password (NOT your regular Gmail password)
# Create at: Google Account > Security > 2-Step Verification > App passwords
EMAIL_PASS=

# HMAC secret for additional security - should be a long random string
# Generate: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
HMAC_SECRET=

# Recovery code secret for hashing recovery codes - should be a long random string
# Generate: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
RECOVERY_CODE_SECRET=

# Google reCAPTCHA v2 Site Key - Public key displayed on your frontend
# Get from: https://www.google.com/recaptcha/admin/create
NEXT_PUBLIC_RECAPTCHA_SITE_KEY=

# Google reCAPTCHA v2 Secret Key - Private key used for backend verification
# Get from: https://www.google.com/recaptcha/admin/create
RECAPTCHA_SECRET_KEY=

# Secret key for encrypting 2FA secrets - Must be a 64-character hex string (32 bytes)
# Generate: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
SECRET_ENCRYPTION_KEY=